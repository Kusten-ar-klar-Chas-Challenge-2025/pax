---
  openapi: "3.0.0"
  info: 
    title: "Pax API"
    version: "1.0.0"
    description: "Documentation for the Pax API, powering automated room bookings through real-time sensor data. This API handles users, rooms, and sensors to streamline presence-based reservation management."
  servers: 
    - 
      url: "http://localhost:13000"
  components: 
    schemas: 
      User: 
        type: "object"
        properties: 
          id: 
            type: "integer"
          firstname: 
            type: "string"
          lastname: 
            type: "string"
          email: 
            type: "string"
          role: 
            type: "string"
      CreateUserInput: 
        type: "object"
        required: 
          - "firstname"
          - "lastname"
          - "email"
          - "password"
        properties: 
          firstname: 
            type: "string"
          lastname: 
            type: "string"
          email: 
            type: "string"
          password: 
            type: "string"
          role: 
            type: "string"
      Room: 
        type: "object"
        properties: 
          id: 
            type: "integer"
          name: 
            type: "string"
          description: 
            type: "string"
          available: 
            type: "boolean"
          air_quality: 
            type: "string"
          screen: 
            type: "boolean"
          floor: 
            type: "integer"
          chairs: 
            type: "integer"
          whiteboard: 
            type: "boolean"
          projector: 
            type: "boolean"
      CreateRoomInput: 
        type: "object"
        required: 
          - "name"
          - "description"
          - "available"
          - "air_quality"
          - "screen"
          - "floor"
          - "chairs"
          - "whiteboard"
          - "projector"
        properties: 
          name: 
            type: "string"
          description: 
            type: "string"
          available: 
            type: "boolean"
          air_quality: 
            type: "string"
          screen: 
            type: "boolean"
          floor: 
            type: "integer"
          chairs: 
            type: "integer"
          whiteboard: 
            type: "boolean"
          projector: 
            type: "boolean"
      Error: 
        type: "object"
        properties: 
          error: 
            type: "string"
  paths: 
    /rooms: 
      get: 
        summary: "Get all rooms"
        tags: 
          - "Rooms"
        responses: 
          200: 
            description: "A list of rooms"
            content: 
              application/json: 
                schema: 
                  type: "array"
                  items: 
                    $ref: "#/components/schemas/Room"
          500: 
            description: "Internal server error"
      post: 
        summary: "Create a new room"
        tags: 
          - "Rooms"
        requestBody: 
          required: true
          content: 
            application/json: 
              schema: 
                $ref: "#/components/schemas/CreateRoomInput"
        responses: 
          201: 
            description: "Room created successfully"
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/Room"
          500: 
            description: "Error creating room"
    /rooms/{id}: 
      get: 
        summary: "Get a room by ID"
        tags: 
          - "Rooms"
        parameters: 
          - 
            in: "path"
            name: "id"
            required: true
            schema: 
              type: "integer"
            description: "Room ID"
        responses: 
          200: 
            description: "Room found"
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/Room"
          404: 
            description: "Room not found"
          500: 
            description: "Internal server error"
      put: 
        summary: "Update a room"
        tags: 
          - "Rooms"
        parameters: 
          - 
            in: "path"
            name: "id"
            required: true
            schema: 
              type: "integer"
            description: "Room ID"
        requestBody: 
          required: true
          content: 
            application/json: 
              schema: 
                $ref: "#/components/schemas/CreateRoomInput"
        responses: 
          200: 
            description: "Room updated successfully"
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/Room"
          404: 
            description: "Room not found"
          500: 
            description: "Internal server error"
      delete: 
        summary: "Delete a room"
        tags: 
          - "Rooms"
        parameters: 
          - 
            in: "path"
            name: "id"
            required: true
            schema: 
              type: "integer"
            description: "Room ID"
        responses: 
          200: 
            description: "Room deleted successfully"
            content: 
              application/json: 
                schema: 
                  type: "object"
                  properties: 
                    message: 
                      type: "string"
                    room: 
                      $ref: "#/components/schemas/Room"
          404: 
            description: "Room not found"
          500: 
            description: "Internal server error"
    /ping: 
      get: 
        summary: "Test route"
        responses: 
          200: 
            description: "Pong response"
    /users: 
      post: 
        summary: "Create a new user"
        tags: 
          - "Users"
        requestBody: 
          required: true
          content: 
            application/json: 
              schema: 
                type: "object"
                required: 
                  - "firstname"
                  - "lastname"
                  - "email"
                  - "password"
                properties: 
                  firstname: 
                    type: "string"
                  lastname: 
                    type: "string"
                  email: 
                    type: "string"
                  password: 
                    type: "string"
                  role: 
                    type: "string"
        responses: 
          201: 
            description: "User created successfully"
          500: 
            description: "Error creating user"
      get: 
        summary: "Get all users"
        tags: 
          - "Users"
        responses: 
          200: 
            description: "A list of users"
            content: 
              application/json: 
                schema: 
                  type: "array"
                  items: 
                    $ref: "#/components/schemas/User"
          500: 
            description: "Error fetching users"
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/Error"
    /users/{id}: 
      get: 
        summary: "Get a user by ID"
        tags: 
          - "Users"
        parameters: 
          - 
            in: "path"
            name: "id"
            required: true
            schema: 
              type: "integer"
            description: "ID of the user"
        responses: 
          200: 
            description: "User found"
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/User"
          404: 
            description: "User not found"
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/Error"
          500: 
            description: "Error fetching user"
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/Error"
      put: 
        summary: "Update a user"
        tags: 
          - "Users"
        parameters: 
          - 
            in: "path"
            name: "id"
            required: true
            schema: 
              type: "integer"
            description: "ID of the user to update"
        requestBody: 
          required: true
          content: 
            application/json: 
              schema: 
                $ref: "#/components/schemas/User"
        responses: 
          200: 
            description: "User updated successfully"
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/User"
          404: 
            description: "User not found"
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/Error"
          500: 
            description: "Error updating user"
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/Error"
      delete: 
        summary: "Delete a user"
        tags: 
          - "Users"
        parameters: 
          - 
            in: "path"
            name: "id"
            required: true
            schema: 
              type: "integer"
            description: "ID of the user to delete"
        responses: 
          200: 
            description: "User deleted successfully"
            content: 
              application/json: 
                schema: 
                  type: "object"
                  properties: 
                    message: 
                      type: "string"
                    user: 
                      $ref: "#/components/schemas/User"
          404: 
            description: "User not found"
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/Error"
          500: 
            description: "Error deleting user"
            content: 
              application/json: 
                schema: 
                  $ref: "#/components/schemas/Error"
  tags: 
    - 
      name: "Users"
      description: "User management"

